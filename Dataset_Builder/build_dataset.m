% ==================================
% TRADERS RANKING DATASET GENERATION
% ==================================

function OK = build_dataset(caseid,N,M)

fprintf('Building dataset for case %d: #traders N=%d and #customers M=%d \n',caseid,N,M);

% -----------------------------

% Performance criteria

% 1./ PROFITABILITY
%       The profitability criterion for traders is the 
%       ability to generate profits from trading activities. 
%       Higher values are better.
% 2./ RETURN ON INVESTMENT
%       The ROI represents the profit or loss generated by a 
%       trader relative to the amount of capital invested. 
%       Higher values are better.
% 3./ MAXIMUM DRAWDOWN (MDD) 
%       It is a measure of risk that traders use to evaluate the 
%       performance of their trading strategies. MDD is defined as the 
%       maximum percentage loss that a trader experiences from the 
%       highest point of their account value to the lowest point.
%       Smaller values are better

% Bounds of performance criteria (in % small-medium-high)
fprintf('Reading bounds of performance criteria ... ');
Prof_bounds = [10 20 40];
ROI_bounds = [5 20 30];
MDD_bounds = [50 80 90]; % This is the 100-MDD value (so higher is better)
fprintf('OK \n');

% -----------------------------

% Build trader scores at random
fprintf('Producing randomized trader scores for each criterion ... ');
TR = zeros(N,3);
for i = 1:N
    
    % Set performance
    r = rand;
    if (r < 1/3) 
        TR(i,1) = rand * Prof_bounds(1); % bad
    elseif (r < 2/3)
        TR(i,1) = Prof_bounds(1) + rand * (Prof_bounds(2)-Prof_bounds(1)); % average
    else
        TR(i,1) = Prof_bounds(2) + rand * (Prof_bounds(3)-Prof_bounds(2)); % good
    end
    
    % Set ROI
    r = rand;
    if (r < 1/3) 
        TR(i,2) = rand * ROI_bounds(1); % bad
    elseif (r < 2/3)
        TR(i,2) = ROI_bounds(1) + rand * (ROI_bounds(2)-ROI_bounds(1)); % average
    else
        TR(i,2) = ROI_bounds(2) + rand * (ROI_bounds(3)-ROI_bounds(2)); % good
    end
    
    % Set MDD
    r = rand;
    if (r < 1/3) 
        TR(i,3) = rand * MDD_bounds(1); % bad
    elseif (r < 2/3)
        TR(i,3) = MDD_bounds(1) + rand * (MDD_bounds(2)-MDD_bounds(1)); % average
    else
        TR(i,3) = MDD_bounds(2) + rand * (MDD_bounds(3)-MDD_bounds(2)); % good
    end
    
end
fprintf('OK \n');

% -----------------------------

% Build a performance matrix for each criterion (for AHP)
fprintf('Build the relevant performance matrix for each criterion ... ');
PM_PRO = zeros(N);
PM_ROI = zeros(N);
PM_MDD = zeros(N);
for i = 1:N
    for j = i:N
        PM_PRO(i,j) = TR(i,1) / TR(j,1);
        PM_PRO(j,i) = 1 / PM_PRO(i,j);
        
        PM_ROI(i,j) = TR(i,2) / TR(j,2);
        PM_ROI(j,i) = 1 / PM_ROI(i,j);
        
        PM_MDD(i,j) = TR(i,3) / TR(j,3);
        PM_MDD(j,i) = 1 / PM_MDD(i,j);
    end
end
fprintf('OK \n');

% -----------------------------

% Calculate max eigenvalues and their eigenvectors
fprintf('Calculate the eigenvalues and eigenvectors ... ');

[EigVec,EigVal] = eig(PM_PRO); # EigVec: matrix where each column is an eigenvector, EigVal: matrix where the diagional are the eigenvalues
EigVal = diag(EigVal); # extract the diagonal 
[~,maxi] = max(EigVal); #get index of max eigenvalue 
maxV_PRO = EigVec(:,maxi) ./ sum(EigVec(:,maxi));  #normalized priority vector - sum is 1 since it is normalized - shows relative weights among the things compared
if (sum(maxV_PRO < 0) > 0)
    error('ERROR :: Negative value in eigenvector maxV_PRO \n\n');
end

[EigVec,EigVal] = eig(PM_ROI);
EigVal = diag(EigVal);
[~,maxi] = max(EigVal); #get the idx of max eigenvalue
maxV_ROI = EigVec(:,maxi) ./ sum(EigVec(:,maxi)); #get the column of EigVec that corresponds to the column 'maxi', the one that corresponds to the max eigenvalue
if (sum(maxV_ROI < 0) > 0)
    error('ERROR :: Negative value in eigenvector maxV_ROI \n\n');
end

[EigVec,EigVal] = eig(PM_MDD);
EigVal = diag(EigVal);
[~,maxi] = max(EigVal);
maxV_MDD = EigVec(:,maxi) ./ sum(EigVec(:,maxi));
if (sum(maxV_MDD < 0) > 0)
    error('ERROR :: Negative value in eigenvector maxV_MDD \n\n');
end

EIGM = [maxV_PRO maxV_ROI maxV_MDD]; #contains the priority vectors for each criterion -> each priority vector has 
fprintf('OK \n');

% -----------------------------

% Customer Rankings
fprintf('Produce customer rankings ... ');
CRM = zeros(M,N); #each customer rates traders 1-N
# for each customer
for c = 1:M
    
    % Build customer preferences on the criteria
    cp = rand(1,3); # a row with three random numbers 
    cp = cp ./ sum(cp); #normalize so  it adds up to 1 - it's like "how much each contributes to the whole"
    CPM = zeros(3);
    for i = 1:3
        for j = i:3
            CPM(i,j) = cp(i) / cp(j);
            CPM(j,i) = 1 / CPM(i,j);
        end
    end
    [EigVec,EigVal] = eig(CPM);
    EigVal = diag(EigVal);
    [~,maxi] = max(EigVal);
    maxV_CPM = EigVec(:,maxi) ./ sum(EigVec(:,maxi));
    if (sum(maxV_CPM < 0) > 0)
        error('ERROR :: Negative value in eigenvector maxV_CPM \n\n');
    end

    % Trader scores
    TS = zeros(1,N); # a row with N columns/places
    #for each trader
    for i = 1:N
        TS(i) = EIGM(i,:)*maxV_CPM; #for each trader -> multiply the row that holds their rating for each criterion and multiply with the priority vector of customer c
       #this gives a number that is placed at idx i in TS 
    end
    
    % Trader ranking
    [~,iTS] = sort(TS); #get the idxs of how the scores in TS would be sorted for this customer
    for i = 1:N
        CRM(c,iTS(i)) = i; #for customer c (row), for each of the traders, place i at (col position) iTS(i) ???
    end
    
end
fprintf('OK \n');

% Customer weights according to investment size
fprintf('Produce customer weights ... ');
CW = lognrnd(log(20000),1,[1,M]); % LogNormal
%CW = rand(1,M); % Uniform
CW = CW ./ sum(CW);
fprintf('OK \n');

% Write rankings in output file
fnam = ['datasets/Dataset_Rankings_C_' int2str(caseid) '_N_' int2str(N) '_M_' int2str(M) '.txt'];
fprintf('Writing rankings in file ''''%s'''' ... ', fnam);
fout1 = fopen(fnam,'w');
for i=1:M
    for j=1:N
        fprintf(fout1,'%4d ',CRM(i,j));
    end
    fprintf(fout1,' \n');
end
fclose(fout1);
fprintf('OK \n');

% Write customer weights in output file
fnam = ['datasets/Dataset_Weights_C_' int2str(caseid) '_N_' int2str(N) '_M_' int2str(M) '.txt'];
fprintf('Writing customer weights in file ''''%s'''' ... ', fnam);
fout2 = fopen(fnam,'w');
for i=1:M
    fprintf(fout1,'%10e ',CW(i));
end
fclose(fout2);
fprintf('OK \n');

fprintf('Finished successfully! \n');
fprintf('-------------------------------------------\n');

OK=1;





